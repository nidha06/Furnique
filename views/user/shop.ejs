<!-- /*
* Bootstrap 5
* Template Name: Furni
* Template Author: Untree.co
* Template URI: https://untree.co/
* License: https://creativecommons.org/licenses/by/3.0/
*/ -->
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="author" content="Untree.co">
  <link rel="shortcut icon" href="favicon.png">

  <meta name="description" content="" />
  <meta name="keywords" content="bootstrap, bootstrap4" />

  <!-- Bootstrap CSS -->
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <link href="/css/tiny-slider.css" rel="stylesheet">
  <link href="/css/style.css" rel="stylesheet">
  <!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <title>Furni - Modern Furniture Store</title>
  <style>
	/* General Styles */
body {
  font-family: Arial, sans-serif;
  background-color: #f8f9fa;
}

/* Product Section */
.product-section {
  padding: 50px 0;
}

/* Card Styles */
.card {
  border: none;
  transition: all 0.3s ease-in-out;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px #570B4F;
}

.card-title {
  font-size: 1.2rem;
  font-weight: bold;
}

.card-text {
  font-size: 0.9rem;
  color: #6c757d;
}

.card img {
  width: 100%;
  height: auto;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
}

/* Sidebar Filter Styles */
.card-body h6 {
  font-weight: bold;
}

.list-unstyled li {
  padding: 5px 0;
}

/* Buttons */
.btn {
  border-radius: 5px;
  transition: background-color 0.3s ease-in-out;
}

.btn-outline-dark:hover {
  background-color: #c213b0;
  color: #fff;
}

.btn-dark {
  background-color: #570B4F;
}

/* Pagination */
.pagination .page-item .page-link {
  color: #570B4F;
  border-radius: 5px;
}

.pagination .page-item .page-link:hover {
  background-color: #c213b0;
  color: #fff;
}

.pagination .page-item.active .page-link {
  background-color: #c213b0;
  border-color: #570B4F;
}

/* Blurring and Unblurring Text Style */
.blurring-text {
  font-size: 2rem;
    font-weight: lighter;
  color: #fff;
  animation: blurAnimation 5s infinite ease-in-out;
}

/* Animation for blur and unblur effect */
@keyframes blurAnimation {
  0% { 
    filter: blur(5px); 
  }
  50% { 
    filter: blur(0); 
  }
  100% { 
    filter: blur(5px); 
  }
}

.filter-sidebar {
      position: absolute;
      left: 0;
      top: 100px;
    }

    .filter-sidebar .card {
      width: 250px;
    }



  </style>
</head>

<body>

  <!-- Start Header/Navigation -->
  <%- include('../../views/partials/user/header.ejs')%>

  <!-- End Header/Navigation -->
  <div class="container mt-4">
	<form action="/shop" method="GET" class="d-flex justify-content-center">
	  <input value="<%= searchQuery %>" class="form-control w-50" type="text" name="query" placeholder="Search products..." aria-label="Search">
	  <button class="btn btn-dark ms-2" type="submit">Search</button>
	</form>
  </div>
  
  <!-- Start Hero Section -->
  <!-- End Hero Section -->

  <!-- Main Content -->
  <div class="untree_co-section product-section before-footer-section">
    <div class="container">
      <div class="row">


        <!-- Filter Sidebar -->
<div class="col-12 col-md-3 mb-5">
  <div class="card shadow-sm">
    <div class="card-body">
      <!-- Sort Dropdown -->
      <div class="mb-4">
        <h4 style="color: #570B4F;" class="">Sort By</h4>
        <select class="form-select" id="sortDropdown">
          <option style="color: #570B4F;" value="new-arrival" <%= selectedSort === 'new-arrival' ? 'selected' : '' %>>New Arrival</option>
          <option style="color: #570B4F;" value="a-to-z" <%= selectedSort === 'a-to-z' ? 'selected' : '' %>>A to Z</option>
          <option style="color: #570B4F;" value="z-to-a" <%= selectedSort === 'z-to-a' ? 'selected' : '' %>>Z to A</option>
          <option style="color: #570B4F;" value="high-to-low" <%= selectedSort === 'high-to-low' ? 'selected' : '' %>>Price: High to Low</option>
          <option style="color: #570B4F;" value="low-to-high" <%= selectedSort === 'low-to-high' ? 'selected' : '' %>>Price: Low to High</option>
      </select>
      </div>

      <!-- Category Filter -->
      <div class="mb-4">
        <h4 style="color: #570B4F;" class="">Category</h4>
        <ul class="list-unstyled">
          <% for(let i=0;i<category.length;i++){ %>
          <li>
            <h6 style="color: #570B4F;">
              <a href="/filter?category=<%= category[i]._id %>" class="text-decoration-none">
                <%= category[i].name %>
              </a>
            </h6>
          </li>
          <% } %>
        </ul>
      </div>

      <!-- Price Filter -->
      <div class="mb-4">
        <h6 style="color: #570B4F;" class="">Price Range</h6>
        <div class="form-check">
          <input class="form-check-input price-filter" type="checkbox" id="priceUnder10000" name="priceRange" 
                 value="0-10000" <%= selectedPriceRanges.includes('0-10000') ? 'checked' : '' %>>
          <label style="color: #570B4F;" class="form-check-label" for="priceUnder10000">Under ₹10000</label>
        </div>
        <div class="form-check">
          <input class="form-check-input price-filter" type="checkbox" id="price10000to15000" name="priceRange" 
                 value="10000-15000" <%= selectedPriceRanges.includes('10000-15000') ? 'checked' : '' %>>
          <label style="color: #570B4F;" class="form-check-label" for="price10000to15000">₹10000 - ₹15000</label>
        </div>
        <div class="form-check">
          <input class="form-check-input price-filter" type="checkbox" id="price15000to20000" name="priceRange" 
                 value="15000-20000" <%= selectedPriceRanges.includes('15000-20000') ? 'checked' : '' %>>
          <label style="color: #570B4F;" class="form-check-label" for="price15000to20000">₹15000 - ₹20000</label>
        </div>
        <div class="form-check">
          <input class="form-check-input price-filter" type="checkbox" id="priceAbove20000" name="priceRange" 
                 value="20000-999999" <%= selectedPriceRanges.includes('20000-999999') ? 'checked' : '' %>>
          <label style="color: #570B4F;" class="form-check-label" for="priceAbove20000">Above ₹20000</label>
        </div>
      </div>
      
      <!-- Update the apply filters button -->
      <button id="applyFilters" style="background-color: #570B4F; color: #fff;" class="btn w-100">Apply Filters</button>
    </div>
  </div>
</div>
        <!-- Filter Sidebar -->
<!-- Apply Filters Button -->
		
  

        <!-- Product Grid -->
		
        <div class="col-12 col-md-9">
          <div class="row">
			<% for(let i=0;i<products.length;i++){ %>
            <!-- Product Item -->
			<div class="col-12 col-md-6 col-lg-4 mb-5">
				<div class="card product-item shadow-sm position-relative">
				  <!-- Wishlist Icon -->
				  <a href="" class="wishlist-icon position-absolute top-0 end-0 m-2" style="font-size: 24px; color: #570B4F;">
					<i class="fas fa-heart"></i>
				</a>
				  <a href="/productDetails?id=<%=products[i]._id %>">
				  <img src="/uploads/<%=products[i].images[0] %>" class="card-img-top" alt="<%=products[i].productName %>">
				  <div class="card-body">
					<h5 class="card-title"><%=products[i].productName %></h5>
					<p class="card-text text-muted">Price:&#8377;<%=products[i].salePrice%> <span> <strike><%=products[i].regularPrice%></strike></span> </p>
				</a>
        <% if(user){ %>
        <% let isInCart = false;%>
        <%   if (cart) {%>
              <%      isInCart = cart.items.some(item => item.product._id.toString() === products[i]._id.toString());%>
                    <% } %>

          <% if(isInCart){ %>
             <a href="/cart" class="btn btn-outline-dark w-100 bg-dark mt-3" 
             data-id="<%= products[i]._id %>">
             Go to Cart
          </a>
           
            <%} else{ %>
              <a href="#" class="btn btn-outline-dark w-100 mt-3 add-to-cart" 
               data-id="<%= products[i]._id %>">
               Add to Cart
            </a>  
         <% } %>
         
         <% } else {%>
              <a href="/login" class="btn btn-outline-dark w-100 mt-3 " >
                Add to Cart
             </a>
              <% } %>
				  </div>
				</div>
			  </div>
			  <% } %>
			  

            

          </div>
        </div>

      </div>

      <!-- Pagination -->
      <div class="pagination">
		<% if (currentPage > 1) { %>
		  <a class="btn" href="/shop?page=<%= currentPage - 1 %>">Prev</a>
		<% } %>
   
   
		<% for (let i = 1; i <= totalPages; i++) { %>
		  <a class="btn <%= currentPage === i ? 'active' : '' %>" href="/shop?page=<%= i %>"><%= i %></a>
		<% } %>
   
   
		<% if (currentPage < totalPages) { %>
		  <a class="btn" href="/shop?page=<%= currentPage + 1 %>">Next</a>
		<% } %>
	  </div>
   
   

    </div>
  </div>

  <!-- Start Footer Section -->
  <%-include("../../views/partials/user/footer.ejs")%>
  <!-- End Footer Section -->
   <script>
    document.addEventListener('DOMContentLoaded', function () {
    const addToCartButtons = document.querySelectorAll('.add-to-cart');

    addToCartButtons.forEach(button => {
        button.addEventListener('click', async (event) => {
            event.preventDefault();
            const productId = button.getAttribute('data-id');
            try {
              const response = await fetch('/add-to-cart',{
              method:'POST',
              headers:{'Content-Type':'application/json'},
              body:JSON.stringify({productId})
            })
           
           if(response.ok){
            Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Product added to cart!',
                    timer: 2000,
                    toast:true,
                    showConfirmButton: false
                });

                setTimeout(() => {
                  window.location.reload();
                }, 500);
               
           } 
          else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops!',
                    text: data.message
                });
            }
            } catch (error) {
              console.log(error)
            }

            

  //          fetch("/add-to-cart")
  // .then(response => response.text()) // Read as text first
  // .then(text => {
  //   try {
  //     return JSON.parse(text); // Try parsing JSON
  //   } catch {
  //     throw new Error("Received non-JSON response");
  //   }
  // })
  // .then(data => console.log(data))
  // .catch(error => console.error("Error:", error));



            

        });
    });
});


document.addEventListener('DOMContentLoaded', function() {
    const sortDropdown = document.getElementById('sortDropdown');
    
    async function handleSortChange() {
        const selectedValue = sortDropdown.value;
        const currentUrl = new URL(window.location.href);
        
        // Add or update the sort parameter
        currentUrl.searchParams.set('sort', selectedValue);
        
        // Keep the existing page parameter if it exists
        const page = currentUrl.searchParams.get('page');
        if (page) {
            currentUrl.searchParams.set('page', page);
        }
        
        // Keep the existing category parameter if it exists
        const category = currentUrl.searchParams.get('category');
        if (category) {
            currentUrl.searchParams.set('category', category);
        }
        
        try {
            window.location.href = currentUrl.toString();
        } catch (error) {
            console.error('Error during sorting:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong while sorting products!'
            });
        }
    }

    // Attach the event handler
    sortDropdown.addEventListener('change', handleSortChange);
});


// Add this to your existing script section
document.addEventListener('DOMContentLoaded', function() {
    const priceCheckboxes = {
        'priceUnder100': { min: 0, max: 10000 },
        'price100to500': { min: 10000, max: 15000 },
        'price500to1000': { min: 15000, max: 20000 },
        'priceAbove1000': { min: 20000, max: Infinity }
    };

    const applyFilterButton = document.querySelector('.btn.btn-dark.w-100');
    
    applyFilterButton.addEventListener('click', function(e) {
        e.preventDefault();
        
        const currentUrl = new URL(window.location.href);
        const selectedPrices = [];
        
        // Check which price ranges are selected
        for (const [id, range] of Object.entries(priceCheckboxes)) {
            if (document.getElementById(id).checked) {
                selectedPrices.push(`${range.min}-${range.max}`);
            }
        }
        
        // Add price ranges to URL
        if (selectedPrices.length > 0) {
            currentUrl.searchParams.set('priceRanges', selectedPrices.join(','));
        } else {
            currentUrl.searchParams.delete('priceRanges');
        }
        
        // Preserve existing sort and category parameters
        const sort = currentUrl.searchParams.get('sort');
        const category = currentUrl.searchParams.get('category');
        
        if (sort) currentUrl.searchParams.set('sort', sort);
        if (category) currentUrl.searchParams.set('category', category);
        
        // Reset to page 1 when applying new filters
        currentUrl.searchParams.set('page', '1');
        
        // Navigate to filtered URL
        window.location.href = currentUrl.toString();
    });

    // Set checkboxes based on URL parameters when page loads
    const urlParams = new URLSearchParams(window.location.search);
    const priceRanges = urlParams.get('priceRanges');
    
    if (priceRanges) {
        const ranges = priceRanges.split(',');
        ranges.forEach(range => {
            const [min, max] = range.split('-');
            for (const [id, priceRange] of Object.entries(priceCheckboxes)) {
                if (priceRange.min === parseInt(min) && priceRange.max === parseInt(max)) {
                    document.getElementById(id).checked = true;
                }
            }
        });
    }
});




document.addEventListener('DOMContentLoaded', function() {
    const applyFiltersBtn = document.getElementById('applyFilters');
    
    // Function to get current URL parameters
    function getCurrentUrlParams() {
        return new URLSearchParams(window.location.search);
    }
    
    // Function to get selected price ranges
    function getSelectedPriceRanges() {
        const checkboxes = document.querySelectorAll('.price-filter:checked');
        return Array.from(checkboxes).map(checkbox => checkbox.value);
    }
    
    // Apply filters when button is clicked
    applyFiltersBtn.addEventListener('click', function() {
        const selectedPriceRanges = getSelectedPriceRanges();
        const currentUrl = new URL(window.location.href);
        const params = currentUrl.searchParams;
        
        // Update price ranges parameter
        if (selectedPriceRanges.length > 0) {
            params.set('priceRanges', selectedPriceRanges.join(','));
        } else {
            params.delete('priceRanges');
        }
        
        // Preserve other parameters
        const sort = params.get('sort');
        if (sort) params.set('sort', sort);
        
        // Reset to page 1 when applying new filters
        params.set('page', '1');
        
        // Navigate to filtered URL
        window.location.href = currentUrl.toString();
    });
    
    // Handle sort dropdown changes
    const sortDropdown = document.getElementById('sortDropdown');
    if (sortDropdown) {
        sortDropdown.addEventListener('change', function() {
            const currentUrl = new URL(window.location.href);
            const params = currentUrl.searchParams;
            
            params.set('sort', this.value);
            params.set('page', '1');  // Reset to first page on sort change
            
            window.location.href = currentUrl.toString();
        });
    }
});


   </script>

  <!-- Scripts -->
  <script src="js/bootstrap.bundle.min.js"></script>
  <script src="js/tiny-slider.js"></script>
  <script src="js/custom.js"></script>
</body>
</html>