<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FURNIQUE | Where Luxury Meets Function</title>
    <link rel="shortcut icon" href="/images/furnique-icon.svg">
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <link href="/css/tiny-slider.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <style>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #570B4F;
}

.product-container {
    display: flex;
    flex-wrap: wrap;
    max-width: 1200px;
    margin: 50px auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.product-gallery {
    flex: 1;
    padding: 20px;
}

.main-image-container {
    position: relative;
    overflow: hidden;
    max-width: 100%;
    height: auto;
    text-align: center;
}

.zoom-image {
    width: 100%;
    transition: transform 0.3s ease-in-out;
}

.thumbnail-container {
    display: flex;
    justify-content: center;
    margin-top: 10px;
    gap: 10px;
}

.thumbnail {
    width: 80px;
    height: 80px;
    object-fit: cover;
    cursor: pointer;
    border: 2px solid transparent;
    border-radius: 5px;
    transition: border 0.3s;
}

.thumbnail:hover {
    border: 2px solid #570B4F;
}

.product-details {
    flex: 1;
    padding: 20px;
}

h1 {
    font-size: 24px;
    margin-bottom: 10px;
}

.price {
    font-size: 22px;
    color: #28a745;
    font-weight: bold;
}

.old-price {
    text-decoration: line-through;
    color: #888;
    margin-left: 10px;
}

.description {
    margin: 15px 0;
    font-size: 16px;
    color: #555;
}

.features {
    list-style: none;
    padding: 0;
    margin: 15px 0;
}

.features li {
    margin-bottom: 5px;
    font-size: 16px;
    color: #333;
}

.cart-options {
    margin-top: 20px;
}

.add-to-cart {
    background-color: #570B4F;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
    transition: background 0.3s;
}

.add-to-cart:hover {
    background-color: #0056b3;
}



.breadcrumb-container {
    width: 100%;
    margin-bottom: 20px; /* Adds spacing between breadcrumb and main product image */
}

.page-header .breadcrumb {
    background-color: #f5f5f5;
    padding: 10px 0;
    font-size: 16px;
    text-align: center; /* Center the breadcrumb */
}

.page-header .breadcrumb a {
    color: #570B4F;
    text-decoration: none;
}

.page-header .breadcrumb a:hover {
    text-decoration: underline;
}

.page-header .breadcrumb span {
    margin: 0 5px;
    color: #333;

}
.rating {
    margin: 10px 0;
    font-size: 18px;
    color: #FFD700; /* Gold color for stars */
}

.star {
    margin-right: 5px;
}

.rating-text {
    margin-left: 10px;
    color: #555;
    font-size: 16px;
}

.similar-products {
    max-width: 1200px;
    margin: 40px auto;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.similar-products h2 {
    color: #570B4F;
    margin-bottom: 20px;
    text-align: center;
}

.similar-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    padding: 10px;
}

.similar-product-card {
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease;
}

.similar-product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.similar-product-card a {
    text-decoration: none;
    color: inherit;
}

.similar-product-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
}

.similar-product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.similar-product-info {
    padding: 10px;
}

.similar-product-info h3 {
    font-size: 16px;
    margin: 5px 0;
    color: #333;
}

.similar-product-price {
    font-size: 18px;
    color: #28a745;
    font-weight: bold;
}

.similar-old-price {
    text-decoration: line-through;
    color: #888;
    font-size: 14px;
    margin-left: 5px;
}

/* Add this to your existing CSS */
.main-image-container {
    position: relative; /* Add this line */
}

.wishlist-icon {
    position: absolute;
    top: 15px;
    right: 15px;
    z-index: 100;
    background: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(2px);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .wishlist-icon {
        width: 35px;
        height: 35px;
        top: 10px;
        right: 10px;
    }
    
    .wishlist-icon i {
        font-size: 16px;
    }
}

@media (max-width: 480px) {
    .wishlist-icon {
        width: 30px;
        height: 30px;
        top: 8px;
        right: 8px;
    }
    
    .wishlist-icon i {
        font-size: 14px;
    }
}




    </style>
</head>
<body>
  <%- include('../../views/partials/user/header.ejs')%>

  <div class="product-container">
    <div class="breadcrumb-container">
        <div class="page-header breadcrumb-wrap">
            <div class="container">
                <div class="breadcrumb">
                    <a href="http://localhost:3001/" rel="nofollow">Home ></a>
                    <span><a href="http://localhost:3001/shop" rel="nofollow">Shop ></a></span>
                    <span><a href="#" rel="nofollow">Product Details</a></span>
                </div>
            </div>
        </div>
    </div>
    
    <main class="product-container">
        <div class="product-gallery">
          <div class="main-image-container">
            <button class="wishlist-icon" data-product-id="<%= product._id %>" 
              title="<%= wishlistProducts.includes(product._id.toString()) ? 'Remove from Wishlist' : 'Add to Wishlist' %>">
              <i class="<%= wishlistProducts.includes(product._id.toString()) ? 'fa-solid' : 'fa-regular' %> fa-heart"style="font-size: 22px; color: <%= wishlistProducts.includes(product._id.toString()) ? '#c213b0' : '#888' %>;">
              </i>
          </button>
          <% if (typeof product !== 'undefined' && product.images && product.images.length > 0) { %>
            <img id="main-image" src="/uploads/<%= product.images[0] %>" class="zoom-image" onmousemove="zoom(event)" onmouseout="resetZoom()">
            
            
                
        <% } else { %>
            <img id="main-image" src="/images/default-placeholder.png" class="zoom-image">
        <% } %>
      </div>
            <div class="thumbnail-container">
                <% product.images.forEach(image => { %>
                    <img class="thumbnail" src="/uploads/<%= image %>" onclick="changeImage(this)">
                <% }); %>
            </div>
        </div>
        <div class="product-details">
            <h1><%= product.productName %></h1>
            <div class="rating">
              <span class="star">&#9733;</span>
              <span class="star">&#9733;</span>
              <span class="star">&#9733;</span>
              <span class="star">&#9733;</span>
              <span class="star">&#9734;</span>
              <span class="rating-text">(4/5)</span>
              
          </div>
            <p class="price"> &#8377;<%= product.salePrice %> <span class="old-price"> &#8377;<%= product.regularPrice %> </span></p>
            <h4 style="color: green;"><u><%=product.productOffer %> %Off</u></h4>
            <p class="description"><%= product.description %></p>
            <ul class="features">
                <li>*1 Year Warranty</li>
                <li>*30-Day Return Policy</li>
                <li>*Cash on Delivery Available</li>
                <li><i>(25+ Reviews)</i></li>
            </ul>
            <% if(product.quantity === 0  ){ %>
            <h5 style="color: red;">Product Out of stock</h5>
             <% } %>
             <% if(product.quantity <= 5 ){ %>
             <h5 style="color: red;">Limited Stock!!</h5>
             <% } %>
            <div class="cart-options">
                <% if(user){ %>
                    <% let isInCart = false; %>
                    <% if (cart) { %>
                      <% isInCart = cart.items.some(item => item.product._id.toString() === product._id.toString()); %>
                    <% } %>
            
                    <% if(isInCart){ %>
                      <a href="/cart" class="btn w-100 mt-3" style="background-color:black; color: white;">
                        Go to Cart
                      </a>
                    <% } else { %>
                      <a href="#" class="btn w-100 mt-3 add-to-cart" data-id="<%= product._id %>" 
                         style="background-color: #570B4F; color: white;">
                        Add to Cart
                      </a>
                    <% } %>
                  <% } else { %>
                    <a href="/login" class="btn w-100 mt-3" style="background-color: #570B4F; color: white;">
                      Add to Cart
                    </a>
                  <% } %>
                
            </div>
        </div>
       
    </main>
    <div class="similar-products">
        <h2>Similar Products</h2>
        <div class="similar-products-grid">
            <% similarProducts.forEach(similarProduct => { %>
                <div class="similar-product-card">
                    <a href="/product-details?id=<%= similarProduct._id %>">
                        <div class="similar-product-image">
                            <% if (similarProduct.images && similarProduct.images.length > 0) { %>
                                <img src="/uploads/<%= similarProduct.images[0] %>" alt="<%= similarProduct.productName %>">
                            <% } else { %>
                                <img src="/images/default-placeholder.png" alt="Default Image">
                            <% } %>
                        </div>
                        <div class="similar-product-info">
                            <h3><%= similarProduct.productName %></h3>
                            <p class="similar-product-price">
                                ₹<%= similarProduct.salePrice %>
                                <span class="similar-old-price">₹<%= similarProduct.regularPrice %></span>
                            </p>
                        </div>
                    </a>
                </div>
            <% }); %>
        </div>
    </div>
    <script>
        function changeImage(element) {
            document.getElementById('main-image').src = element.src;
        }

        function zoom(event) {
            let image = document.getElementById("main-image");
            let rect = image.getBoundingClientRect();
            let x = (event.clientX - rect.left) / rect.width * 100;
            let y = (event.clientY - rect.top) / rect.height * 100;
            image.style.transformOrigin = `${x}% ${y}%`;
            image.style.transform = "scale(2)";
        }

        function resetZoom() {
            let image = document.getElementById("main-image");
            image.style.transform = "scale(1)";
        }

        document.addEventListener('DOMContentLoaded', function () {
    const addToCartButtons = document.querySelectorAll('.add-to-cart');

    addToCartButtons.forEach(button => {
        button.addEventListener('click', async (event) => {
            event.preventDefault();
            const productId = button.getAttribute('data-id');
            try {
              const response = await fetch('/add-to-cart',{
              method:'POST',
              headers:{'Content-Type':'application/json'},
              body:JSON.stringify({productId})
            })
           
           if(response.ok){
        
                  window.location.reload();
               
           }
          else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops!',
                    text: data.message
                });
            }
            } catch (error) {
              console.log(error)
            }

            

  //          fetch("/add-to-cart")
  // .then(response => response.text()) // Read as text first
  // .then(text => {
  //   try {
  //     return JSON.parse(text); // Try parsing JSON
  //   } catch {
  //     throw new Error("Received non-JSON response");
  //   }
  // })
  // .then(data => console.log(data))
  // .catch(error => console.error("Error:", error));



            

        });
    });
});



document.addEventListener('DOMContentLoaded', function() {
  // Function to check if user is logged in (fetching from the server)
  async function isUserLoggedIn() {
    try {
      const response = await fetch('/is-logged-in');
      if (response.ok) {
        const data = await response.json();
        return data.isLoggedIn; // Server should return { isLoggedIn: true/false }
      }
      return false;
    } catch (error) {
      console.error("Error checking login status:", error);
      return false;
    }
  }

  // Wishlist Toggle Function
  async function toggleWishlist(productId) {
    try {
      // Check if user is logged in
      const loggedIn = await isUserLoggedIn();
      if (!loggedIn) {
        Swal.fire({
          icon: 'info',
          title: 'Login Required',
          text: 'Please log in to add items to your wishlist',
          showCancelButton: true,
          confirmButtonText: 'Login',
          cancelButtonText: 'Cancel'
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = '/login';
          }
        });
        return;
      }

      // Send request to add/remove from wishlist
      const response = await fetch('/add-wishlist', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId })
      });

      const data = await response.json();

      if (response.ok) {
        // Show success message
        Swal.fire({
          icon: 'success',
          title: data.added ? 'Added to Wishlist!' : 'Removed from Wishlist',
          text: data.message,
          timer: 2000,
          toast: true,
          position: 'top-end',
          showConfirmButton: false
        });

        // Update the wishlist icon
        updateWishlistIcon(productId, data.added);
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops!',
          text: data.message || 'Something went wrong'
        });
      }
    } catch (error) {
      console.error("Error toggling wishlist:", error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to update wishlist. Please try again.'
      });
    }
  }

  // Helper function to update wishlist icon
  function updateWishlistIcon(productId, isInWishlist) {
    const wishlistBtn = document.querySelector(`.wishlist-icon[data-product-id="${productId}"]`);
    if (wishlistBtn) {
      wishlistBtn.innerHTML = isInWishlist
        ? '<i class="fas fa-heart" style="color: #c213b0;"></i>'
        : '<i class="far fa-heart"></i>';
      wishlistBtn.setAttribute('title', isInWishlist ? 'Remove from Wishlist' : 'Add to Wishlist');
    }
  }

  // Function to initialize wishlist status on page load
  async function initializeWishlistStatus() {
    try {
      const response = await fetch('/get-wishlist-status');
      if (response.ok) {
        const data = await response.json();

        // Update each product's wishlist icon based on status
        if (data.wishlistItems && data.wishlistItems.length > 0) {
          data.wishlistItems.forEach(itemId => updateWishlistIcon(itemId, true));
        }
      }
    } catch (error) {
      console.error("Error fetching wishlist status:", error);
    }
  }

  // Get all wishlist buttons
  const wishlistButtons = document.querySelectorAll('.wishlist-icon');

  // Add click event listeners to all wishlist buttons
  wishlistButtons.forEach(button => {
    button.addEventListener('click', function(event) {
      event.preventDefault();
      const productId = this.getAttribute('data-product-id');
      toggleWishlist(productId);
    });
  });

  // Initialize wishlist status only if user is logged in
  isUserLoggedIn().then(loggedIn => {
    if (loggedIn) initializeWishlistStatus();
  });
});



    </script>
    
</body>
</html>
