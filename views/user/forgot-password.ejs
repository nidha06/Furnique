<title>FURNIQUE | Where Luxury Meets Function</title>
<link rel="shortcut icon" href="/images/furnique-icon.svg">
<style>
   
/* General Styles */
body {
    font-family: Arial, sans-serif;
    background-color: #fdf3d2;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

/* Centering the card */
.content-main {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    padding: 20px;
}

/* Enlarged Card */
.card-login {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    padding: 30px; /* Increased padding */
    width: 100%;
    max-width: 500px; /* Increased width */
}

/* Input Field */
.form-control {
    border-radius: 5px;
    padding: 10px;  /* Reduced padding */
    border: 1px solid #ced4da;
    transition: border 0.3s ease;
    font-size: 1rem;
    width: 100%;  /* Match button width */
}

/* Input Focus Effect */
.form-control:focus {
    border-color: #570B4F;
    box-shadow: 0 0 5px rgba(87, 11, 79, 0.5);
    outline: none;
}

/* Invalid Input */
.is-invalid {
    border-color: red !important;
    background-color: #ffe6e6;
}

/* Error Message */
.error-message {
    color: red;
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

/* Button Styles */
.btn-primary {
    background-color: #570B4F;
    border: none;
    padding: 8px;  /* Reduced button height */
    border-radius: 5px;
    font-size: 1rem;
    transition: background 0.3s ease;
    color: #f8f9fa;
    width: 100%; /* Full width */
}

.btn-primary:hover {
    background-color: #4a0944;
}

/* Link Styling */
p a {
    color: #007bff;
    text-decoration: none;
    font-weight: bold;
}

p a:hover {
    text-decoration: underline;
}

/* Responsive Design */
@media (max-width: 768px) {
    .card-login {
        max-width: 90%;
        padding: 20px;
    }
}

@media (max-width: 480px) {
    .card-login {
        max-width: 100%;
        padding: 20px;
    }

    .btn-primary {
        font-size: 0.9rem;
        padding: 8px;
    }

    .form-control {
        font-size: 0.9rem;
        padding: 8px;
    }
}



 </style>
 <section class="content-main" style="margin-top: 80px; margin-bottom: 80px;">
    <div class="card mx-auto card-login col-4">
        <div class="card-body">
            <h4 class="card-title mb-4">Email</h4>
            <form method="post" action="/forgot-email-valid" onsubmit="return validateLoginForm()">
                <div class="mb-3">
                    <input class="form-control" name="email" placeholder="Email" type="text" id="email">
                    <div class="error-message" id="email-error"></div>
                </div>
                <div class="mb-4">
                    <button type="submit" class="btn btn-primary w-100">Verify</button>
                </div>
            </form>
          
            <p class="text-center mb-4">Don't have an account? <a href="/signup">Sign up</a></p>
        </div>
    </div>
 </section>
 
 
 <script>
    
    async function validateLoginForm(event) {
        event.preventDefault(); // Prevent form submission

        const emailInput = document.getElementById('email');
        const emailError = document.getElementById('email-error');
        const emailValue = emailInput.value.trim();
        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

        if (emailValue === '') {
            emailError.textContent = 'Please enter your email.';
            emailInput.classList.add('is-invalid');
            return false;
        } else if (!emailValue.match(emailPattern)) {
            emailError.textContent = 'Please enter a valid email address.';
            emailInput.classList.add('is-invalid');
            return false;
        }

        // **Check if email exists in the database**
        try {
            const response = await fetch('/check-email', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email: emailValue })
            });

            const data = await response.json();

            if (!data.success) {
                emailError.textContent = 'User with this email does not exist.';
                emailInput.classList.add('is-invalid');
                return false;
            } else {
                emailError.textContent = '';
                emailInput.classList.remove('is-invalid');
                document.querySelector('form').submit(); // Submit form if email exists
            }
        } catch (error) {
            console.error('Error checking email:', error);
            emailError.textContent = 'Server error, please try again later.';
            return false;
        }
    }

    document.querySelector('form').addEventListener('submit', validateLoginForm);


 </script>