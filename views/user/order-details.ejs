<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FURNIQUE | Where Luxury Meets Function</title>
  <link rel="shortcut icon" href="/images/furnique-icon.svg">
  <link href="/css/tiny-slider.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/style.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- SweetAlert2 CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
    }
    
    .order-container {
      width: 95%;
      margin: 15px auto;
      padding: 15px;
      background-color: #ffffff;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    
    .order-header h2 {
      color: #570B4F;
      font-size: 1.5rem;
      margin-bottom: 10px;
    }
    
    .order-info {
      margin-bottom: 15px;
    }
    
    .order-id {
      word-break: break-all;
      font-size: 0.9rem;
    }
    
    .table {
      width: 100%;
      font-size: 0.9rem;
    }
    
    .table th {
      background-color: #570B4F;
      color: #fff;
      white-space: nowrap;
    }
    
    .table img {
      max-width: 60px;
      max-height: 60px;
      border-radius: 6px;
      object-fit: contain;
    }
    
    .product-image-cell {
      width: 70px;
    }
    
    .table td {
      vertical-align: middle;
    }
    
    .back-button {
      margin-bottom: 15px;
    }
    
    .order-actions {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .order-actions .btn {
      width: 100%;
      margin-bottom: 5px;
    }
    
    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
      background-color: #fefefe;
      margin: 10% auto;
      padding: 15px;
      border: 1px solid #888;
      width: 90%;
      max-width: 500px;
      border-radius: 10px;
    }
    
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }
    
    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }
    
    .responsive-table {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
    
    /* Tablet and larger screens */
    @media (min-width: 576px) {
      .order-header h2 {
        font-size: 1.8rem;
      }
      
      .table {
        font-size: 1rem;
      }
      
      .table img {
        max-width: 70px;
        max-height: 70px;
      }
    }
    
    /* Desktop screens */
    @media (min-width: 768px) {
      .order-container {
        width: 90%;
        max-width: 1200px;
        margin: 30px auto;
        padding: 20px;
      }
      
      .order-actions {
        flex-direction: row;
        justify-content: flex-start;
      }
      
      .order-actions .btn {
        width: auto;
        margin-right: 10px;
        margin-bottom: 0;
      }
      
      .table img {
        max-width: 80px;
        max-height: 80px;
      }
    }
  </style>
</head>
<body>
  <%- include('../../views/partials/user/header') %>
  <div class="container-fluid order-container">
    <div class="back-button">
      <a href="/userProfile/#orders" style="background-color: #570B4F; color: #fff;" class="btn">
        <i class="fas fa-arrow-left"></i> Back to Orders
      </a>
    </div>
    
    <div class="order-header">
      <h2 style="color: #570B4F;">Order Details</h2>
      <p class="order-id"><strong>Order ID:</strong> <%= order._id %></p>
    </div>
    
    <div class="order-info">
      <h4 style="color: #570B4F;">Shipping Address</h4>
      <p>
        <strong><%= order.shippingAddress.name %></strong><br>
        <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %><br>
        Phone: <%= order.shippingAddress.phone %>
      </p>
    </div>
    
    <div class="order-info">
      <h4 style="color: #570B4F;">Payment Method</h4>
      <p><%= order.paymentMethod.toUpperCase() %></p>
    </div>
    
    <div class="order-info">
      <% if (order.appliedCoupon) { %>
        <p><strong style="color: #570B4F;">Coupon Code:</strong> <%= order.appliedCoupon.code %></p>
        <p><strong style="color: #570B4F;">Discount Amount:</strong> â‚¹<%= order.appliedCoupon.discountAmount %></p>
      <% } else { %>
        <p>No coupon applied</p>
      <% } %>
    </div>
    
    <div class="order-info">
      <h4 style="color: #570B4F;">Status</h4>
      <p id="current-status" data-status="<%= order.status.toLowerCase() %>">
        <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
      </p>
    </div>
    
    <div class="order-info">
      <h4>Products</h4>
      <div class="responsive-table">
        <table class="table table-bordered">
          <thead>
            <tr>
              <th class="product-image-cell">Image</th>
              <th>Product</th>
              <th>Qty</th>
              <th>Price</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          
          <tbody>
            <% order.items.forEach(item => { %>
              <tr data-item-id="<%= item._id %>">
                <td class="product-image-cell"><img src="/uploads/<%= item.image %>"></td>
                <td><%= item.productName %></td>
                <td><%= item.quantity %></td>
                <td>&#8377;<%= item.price.toFixed(2) %></td>
                <td><%= item.status%></td>
                <td>
                  <% if ((item.status || order.status).toLowerCase() !== 'cancelled' && (item.status || order.status).toLowerCase() !== 'delivered' && (item.status || order.status).toLowerCase() !== 'returned' && (item.status || order.status).toLowerCase() !== 'return_requested') { %>
                    <button class="btn btn-sm btn-danger cancel-item-btn" data-item-id="<%= item._id %>">Cancel</button>
                  <% } %>
                  
                  <% if ((item.status || order.status).toLowerCase() === 'delivered') { %>
                    <button class="btn btn-sm btn-warning return-item-btn" data-item-id="<%= item._id %>">Return</button>
                  <% } %>
                </td>
              </tr>
            <% }) %>
            <tr>
              <td colspan="3" class="text-end"><strong>Subtotal:</strong></td>
              <td colspan="3">&#8377;<%= order.items.reduce((sum, item) => sum + item.price, 0).toFixed(2) %></td>
            </tr>
            
            <% if (order.appliedCoupon) { %>
            <tr>
              <td colspan="3" class="text-end"><strong>Coupon Discount:</strong> <span class="text-success">(<%= order.appliedCoupon.code %>)</span></td>
              <td colspan="3" class="text-success">- &#8377;<%= order.appliedCoupon.discountAmount.toFixed(2) %></td>
            </tr>
            <% } %>
            
            <tr>
              <td colspan="3" class="text-end"><strong>Total Amount:</strong></td>
              <td colspan="3" style="font-weight: bold; color: #570B4F;">&#8377;<%= (order.items.reduce((sum, item) => sum + item.price, 0) - (order.appliedCoupon ? order.appliedCoupon.discountAmount : 0)).toFixed(2) %></td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <div class="order-actions mt-3">
        <% if (order.status == 'pending' || order.status.toLowerCase() === 'shipped' || order.status.toLowerCase() === 'processing' && order.items.length > 1) { %>
          <button class="btn btn-danger" id="cancelOrderBtn">Cancel Entire Order</button>
        <% } %>
        
        <% if (order.status.toLowerCase() === 'delivered') { %>
          <button class="btn btn-warning" id="returnOrderBtn">Return Entire Order</button>
        <% } %>
        
        <% if (order.status === 'delivered' && order.paymentMethod === 'razorpay') { %>
          <a href="/invoice/<%= order._id %>" class="btn btn-primary">
            <i class="fas fa-file-invoice"></i> Download Invoice
          </a>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Return Modal for Individual Items -->
  <div id="returnItemModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h3>Return Request</h3>
      <form id="returnItemForm">
        <input type="hidden" id="returnItemId" value="">
        <div class="mb-3">
          <label for="itemReason" class="form-label">Reason for Return</label>
          <select id="itemReason" class="form-select" required>
            <option value="" disabled selected>Select a reason</option>
            <option value="wrong_size">Wrong Size</option>
            <option value="damaged">Damaged Product</option>
            <option value="not_as_described">Not as Described</option>
            <option value="changed_mind">Changed My Mind</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="mb-3">
          <label for="itemDetails" class="form-label">Additional Details</label>
          <textarea id="itemDetails" class="form-control" rows="3" placeholder="Provide additional details (optional)"></textarea>
        </div>
        <button type="submit" class="btn btn-primary w-100">Submit Return Request</button>
      </form>
    </div>
  </div>

  <!-- Return Modal for Entire Order -->
  <div id="returnOrderModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h3>Return Request for Entire Order</h3>
      <form id="returnOrderForm">
        <div class="mb-3">
          <label for="orderReason" class="form-label">Reason for Return</label>
          <select id="orderReason" class="form-select" required>
            <option value="" disabled selected>Select a reason</option>
            <option value="wrong_size">Wrong Size</option>
            <option value="damaged">Damaged Product</option>
            <option value="not_as_described">Not as Described</option>
            <option value="changed_mind">Changed My Mind</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div class="mb-3">
          <label for="orderDetails" class="form-label">Additional Details</label>
          <textarea id="orderDetails" class="form-control" rows="3" placeholder="Provide additional details (optional)"></textarea>
        </div>
        <button type="submit" class="btn btn-primary w-100">Submit Return Request</button>
      </form>
    </div>
  </div>

  <script>
 document.addEventListener("DOMContentLoaded", () => {
  // Apply color styling to order status
  applyStatusStyling();
  
  // Apply color styling to item statuses
  applyItemStatusStyling();

  // Individual Item Cancel Buttons
  document.querySelectorAll('.cancel-item-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const itemId = e.target.getAttribute('data-item-id');
      
      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to cancel this item?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!'
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const orderId = '<%= order._id %>';
            const response = await fetch(`/cancel-item/${orderId}/${itemId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              }
            });
            
            if (response.ok) {
              const result = await response.json();
              
              Swal.fire({
                title: 'Cancelled!',
                text: result.message || 'Item cancelled successfully',
                icon: 'success'
              }).then(() => {
                location.reload();
              });
              
              // Update the item status in the UI
              const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
              const statusCell = row.querySelector('.item-status');
              statusCell.textContent = 'Cancelled';
              statusCell.setAttribute('data-status', 'cancelled');
              applyItemStatusStyling();
              
              // Update the order status if needed
              if (result.orderStatus) {
                const statusElement = document.getElementById('current-status');
                statusElement.textContent = result.orderStatus.charAt(0).toUpperCase() + result.orderStatus.slice(1);
                statusElement.setAttribute('data-status', result.orderStatus.toLowerCase());
                applyStatusStyling();
              }
              
              // Remove the cancel button
              e.target.remove();
            } else {
              const errorData = await response.json();
              Swal.fire({
                title: 'Error!',
                text: errorData.message || 'Failed to cancel item',
                icon: 'error'
              });
            }
          } catch (error) {
            console.error('Error cancelling item:', error);
            Swal.fire({
              title: 'Error!',
              text: 'An unexpected error occurred',
              icon: 'error'
            });
          }
        }
      });
    });
  });

  // Individual Item Return Buttons
  document.querySelectorAll('.return-item-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const itemId = e.target.getAttribute('data-item-id');
      document.getElementById('returnItemId').value = itemId;
      document.getElementById('returnItemModal').style.display = 'block';
    });
  });

  document.getElementById('returnItemForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const itemId = document.getElementById('returnItemId').value;
    const reason = document.getElementById('itemReason').value;
    const details = document.getElementById('itemDetails').value;

    if (!reason) {
      Swal.fire({
        title: 'Missing Information',
        text: 'Please select a reason for return',
        icon: 'warning'
      });
      return;
    }

    try {
      const orderId = '<%= order._id %>';
      console.log('Submitting return request:', { orderId, reason, details });

      const response = await fetch(`/submit-item-return/${orderId}/${itemId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ reason, details }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Error submitting return request:', errorData);
        Swal.fire({
          title: 'Error!',
          text: errorData.message || 'Failed to submit return request',
          icon: 'error'
        });
        return;
      }

      const result = await response.json();
      
      Swal.fire({
        title: 'Success!',
        text: result.message || 'Return request submitted successfully',
        icon: 'success'
      }).then(() => {
        location.reload();
      });

      const returnBtn = row.querySelector('.return-item-btn');
      if (returnBtn) returnBtn.remove();

      document.getElementById('returnItemModal').style.display = 'none';
    } catch (error) {
      console.error('Error submitting return request:', error);
      Swal.fire({
        title: 'Error!',
        text: 'An unexpected error occurred',
        icon: 'error'
      });
    }
  });
  
  // Cancel Entire Order Button
  const cancelOrderBtn = document.getElementById('cancelOrderBtn');
  if (cancelOrderBtn) {
    cancelOrderBtn.addEventListener('click', async () => {
      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to cancel the entire order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!'
      }).then(async (result) => {
        if (result.isConfirmed) {
          const orderId = '<%= order._id %>';
          try {
            const response = await fetch(`/cancel/${orderId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
            });
            if (response.ok) {
              const result = await response.json();
              Swal.fire({
                title: 'Cancelled!',
                text: result.message || 'Order cancelled successfully',
                icon: 'success'
              }).then(() => {
                window.location.reload();
              });
            } else {
              const errorData = await response.json();
              Swal.fire({
                title: 'Error!',
                text: errorData.message || 'Order cannot be cancelled',
                icon: 'error'
              });
            }
          } catch (error) {
            console.error('Error cancelling order:', error);
            Swal.fire({
              title: 'Error!',
              text: 'An error occurred while cancelling the order',
              icon: 'error'
            });
          }
        }
      });
    });
  }

  // Return Entire Order Button
  const returnOrderBtn = document.getElementById('returnOrderBtn');
  if (returnOrderBtn) {
    returnOrderBtn.addEventListener('click', () => {
      document.getElementById('returnOrderModal').style.display = 'block';
    });
  }

  // Return Entire Order Form Submission
  document.getElementById('returnOrderForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const reason = document.getElementById('orderReason').value;
    const details = document.getElementById('orderDetails').value;
    
    if (!reason) {
      Swal.fire({
        title: 'Missing Information',
        text: 'Please select a reason for return',
        icon: 'warning'
      });
      return;
    }
    
    try {
      const orderId = '<%= order._id %>';
      const response = await fetch(`/submit-entire-order-return/${orderId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reason, details }),
      });
      
      if (response.ok) {
        const result = await response.json();
        Swal.fire({
          title: 'Success!',
          text: result.message || 'Return request submitted successfully',
          icon: 'success'
        }).then(() => {
          window.location.reload();
        });
      } else {
        const errorData = await response.json();
        Swal.fire({
          title: 'Error!',
          text: errorData.message || 'Failed to submit return request',
          icon: 'error'
        });
      }
    } catch (error) {
      console.error('Error submitting return request:', error);
      Swal.fire({
        title: 'Error!',
        text: 'An error occurred while submitting the return request',
        icon: 'error'
      });
    }
  });

  // Close modals
  document.querySelectorAll('.close').forEach(closeBtn => {
    closeBtn.addEventListener('click', () => {
      document.getElementById('returnItemModal').style.display = 'none';
      document.getElementById('returnOrderModal').style.display = 'none';
    });
  });

  window.addEventListener('click', (event) => {
    if (event.target === document.getElementById('returnItemModal')) {
      document.getElementById('returnItemModal').style.display = 'none';
    }
    if (event.target === document.getElementById('returnOrderModal')) {
      document.getElementById('returnOrderModal').style.display = 'none';
    }
  });

  // Function to apply styling to order status
  function applyStatusStyling() {
    const statusElement = document.getElementById('current-status');
    const status = statusElement.getAttribute('data-status');
    
    // Remove any existing color classes
    statusElement.classList.remove('text-success', 'text-warning', 'text-danger', 'text-info', 'text-primary');
  }
  
  // Function to apply styling to item statuses
  function applyItemStatusStyling() {
    document.querySelectorAll('.item-status').forEach(element => {
      const status = element.getAttribute('data-status');
      
      // Remove any existing color classes
      element.classList.remove('text-success', 'text-warning', 'text-danger', 'text-info', 'text-primary');
      
      // Apply appropriate color based on status
      switch (status) {
        case 'pending':
          element.classList.add('text-info');
          break;
        case 'processing':
          element.classList.add('text-primary');
          break;
        case 'shipped':
          element.classList.add('text-primary');
          break;
        case 'delivered':
          element.classList.add('text-success');
          break;
        case 'cancelled':
          element.classList.add('text-danger');
          break;
        case 'return_requested':
          element.classList.add('text-warning');
          break;
        case 'returned':
          element.classList.add('text-warning');
          break;
        default:
          element.classList.add('text-info');
      }
    });
  }
});
  </script>
  
  <%- include('../../views/partials/user/footer') %>
</body>
</html>