<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="shortcut icon" href="/images/furnique-icon.svg">
  <title>FURNIQUE | Admin</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Font Awesome for Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
  <!-- SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />
  <!-- Custom Styles -->
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Arial', sans-serif;
      padding: 0;
      margin: 0;
    }
    
    .container {
      width: 100%;
      padding: 15px;
      margin: 0 auto;
      max-width: 100%;
    }
    
    .order-details {
      background-color: #fff;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }
    
    .order-header h2 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #570B4F;
      margin-bottom: 12px;
    }
    
    .order-header p {
      font-size: 0.9rem;
      color: black;
      margin-bottom: 10px;
      word-break: break-word;
    }
    
    .order-info h4 {
      font-size: 1.1rem;
      font-weight: 500;
      color: #570B4F;
      margin-bottom: 10px;
      margin-top: 15px;
    }
    
    .order-info p {
      font-size: 0.9rem;
      color: black;
      margin-bottom: 10px;
      word-break: break-word;
    }
    
    .status-section {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .status-section p {
      font-size: 0.95rem;
      font-weight: 500;
      color: black;
      margin-bottom: 0;
    }
    
    .status-section button {
      padding: 6px 12px;
      font-size: 0.85rem;
      font-weight: 500;
      width: 100%;
    }
    
    .table-responsive {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
    
    .table th {
      background-color: #570B4F;
      color: white;
      white-space: nowrap;
      padding: 8px;
      font-size: 0.85rem;
    }
    
    .table td {
      vertical-align: middle;
      padding: 8px;
      font-size: 0.85rem;
    }
    
    .table img {
      max-width: 60px;
      border-radius: 4px;
    }
    
    .back-button {
      margin-bottom: 15px;
      background-color: #570B4F;
      border-radius: 4px;
    }
    
    .back-button a {
      padding: 8px 12px;
      display: inline-block;
      text-decoration: none;
      color: #fff;
      font-size: 0.9rem;
    }
    
    .action-buttons {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-top: 15px;
    }
    
    .action-buttons button {
      padding: 8px 15px;
      font-size: 0.9rem;
      font-weight: 500;
      border-radius: 6px;
      width: 100%;
    }
    
    .btn-group {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }
    
    .btn-sm {
      font-size: 0.8rem;
      padding: 4px 8px;
      width: 100%;
    }
    
    .return-details {
      font-size: 0.85rem;
    }
    
    .return-details .alert {
      padding: 10px;
    }
    
    .return-details h5 {
      font-size: 1rem;
      margin-bottom: 8px;
    }
    
    .return-details p {
      margin-bottom: 5px;
    }
    
    /* Media queries for responsive design */
    @media (min-width: 576px) {
      .container {
        padding: 20px;
        max-width: 540px;
      }
      
      .order-details {
        padding: 20px;
      }
      
      .btn-group {
        flex-direction: row;
      }
      
      .btn-sm {
        width: auto;
      }
    }
    
    @media (min-width: 768px) {
      .container {
        max-width: 720px;
      }
      
      .order-details {
        padding: 25px;
        border-radius: 10px;
      }
      
      .order-header h2 {
        font-size: 1.6rem;
      }
      
      .status-section {
        flex-direction: row;
        align-items: center;
      }
      
      .status-section button {
        width: auto;
      }
      
      .action-buttons {
        flex-direction: row;
      }
      
      .action-buttons button {
        width: auto;
      }
      
      .table th, .table td {
        padding: 10px;
        font-size: 0.9rem;
      }
      
      .table img {
        max-width: 70px;
      }
    }
    
    @media (min-width: 992px) {
      .container {
        max-width: 960px;
      }
      
      .order-details {
        padding: 30px;
      }
      
      .order-header h2 {
        font-size: 1.75rem;
      }
      
      .order-info h4 {
        font-size: 1.25rem;
      }
      
      .table img {
        max-width: 80px;
      }
    }
    
    @media (min-width: 1200px) {
      .container {
        max-width: 1140px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Back Button -->
    <div class="back-button">
      <a href="/admin/orders" class="d-flex align-items-center">
        <i class="fas fa-arrow-left me-2"></i> Back to Orders
      </a>
    </div>
    
    <!-- Order Details Section -->
    <div class="order-details">
      <div class="order-header">
        <h2>Order Details</h2>
        <p><strong>Order ID:</strong> <%= order._id %></p>
        <p><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleDateString('en-IN') %></p>
      </div>
      
      <!-- Customer Info -->
      <div class="order-info">
        <h4>Customer Information</h4>
        <p>
          <strong>Name:</strong> <%= order.user.name %><br>
          <strong>Email:</strong> <%= order.user.email %>
        </p>
      </div>
      
      <!-- Shipping Address -->
      <div class="order-info">
        <h4>Shipping Address</h4>
        <p>
          <strong><%= order.shippingAddress.name %></strong><br />
          <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %><br />
          Phone: <%= order.shippingAddress.phone %>
        </p>
      </div>
      
      <!-- Payment Method -->
      <div class="order-info">
        <h4>Payment Method</h4>
        <p><%= order.paymentMethod.toUpperCase() %></p>
      </div>
      
      <!-- Order Status Section -->
      <div class="order-info status-section">
        <h4>Order Status:</h4>
        <p id="current-status" data-status="<%= order.status.toLowerCase() %>">
          <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
        </p>
        <button class="btn" style="background-color: #570B4F; color: #fff;" onclick="updateOrderStatus('<%= order._id %>')">Update Order Status</button>
      </div>
      
      <!-- Total Price -->
      <div class="order-info">
        <h4>Total Price</h4>
        <p>&#8377; <%= order.totalPrice.toFixed(2) %></p>
      </div>
      
      <!-- Products Table -->
      <div class="order-items mt-4">
        <h4>Products</h4>
        <div class="table-responsive">
          <table class="table table-bordered">
            <thead class="table-dark">
              <tr>
                <th>Image</th>
                <th>Product</th>
                <th>Qty</th>
                <th>Price</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% order.items.forEach(item => { %>
                <tr id="item-<%= item._id %>">
                  <td>
                    <img src="/uploads/<%= item.image %>" alt="<%= item.productName %>" class="img-fluid">
                  </td>
                  <td><%= item.productName %></td>
                  <td><%= item.quantity %></td>
                  <td>&#8377; <%= item.price.toFixed(2) %></td>
                  <td>
                    <h5 class="fs-6"><%=item.status%></h5>
                  </td>
                  <td>
                    <div class="btn-group" role="group">
                      <% if (item.status !== 'partially_cancelled' && item.status !=='returned'&& item.status !== 'cancelled' && item.status !== 'delivered'&& item.status !== 'return_requested') { %>
                        <button type="button" class="btn btn-sm btn-danger" onclick="cancelItem('<%= order._id %>','<%= item._id %>')">
                          <i class="fas fa-ban"></i> Cancel
                        </button>
                      <% } %>

                      <% if(item.status ==='return_requested') {%>
                        <button type="button" class="btn btn-sm btn-success" onclick="approveItemReturn('<%= order._id %>', '<%= item._id %>')">
                          <i class="fas fa-check"></i> Approve Return
                        </button>
                      <% } %>
                    </div>
                  </td>
                </tr>
                
                <% if (item.returnRequest && item.returnRequest.status === 'pending') { %>
                  <tr class="return-details">
                    <td colspan="6">
                      <div class="alert alert-info mb-0">
                        <h5>Return Request Details</h5>
                        <p><strong>Request Date:</strong> <%= new Date(item.returnRequest.requestDate).toLocaleDateString('en-IN') %></p>
                        <p><strong>Reason:</strong> <%= item.returnRequest.reason %></p>
                        <p><strong>Additional Details:</strong> <%= item.returnRequest.details || 'None' %></p>
                      </div>
                    </td>
                  </tr>
                <% } %>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="action-buttons">
        <% if (order.status !== 'partially_cancelled' && order.status !=='partially_returned'&& order.status !=='return_requested' && order.status !=='returned'&& order.status !== 'cancelled' && order.status !== 'delivered') { %>
        <button style="background-color: rgb(212, 4, 4); color: #fff;" class="btn" onclick="cancelOrder('<%= order._id %>')">
          <i class="fas fa-ban me-2"></i> Cancel Entire Order
        </button>
        <% } %>
      </div>
    </div>
  </div>
  
  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Cancel Order Function
    function cancelOrder(orderId) {
      Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to cancel this entire order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/orders/${orderId}/cancel`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: 'Cancelled!',
                text: 'Order has been cancelled.',
                icon: 'success'
              }).then(() => location.reload());
            } else {
              Swal.fire('Error', data.message || 'Failed to cancel the order.', 'error');
            }
          })
          .catch(error => {
            console.error('Error cancelling order:', error);
            Swal.fire('Error', 'An error occurred while cancelling the order.', 'error');
          });
        }
      });
    }

    // Cancel Individual Item Function
    function cancelItem(orderId, itemId) {
      Swal.fire({
        title: 'Cancel Item',
        text: "Do you want to cancel just this item?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel item'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/orders/${orderId}/items/${itemId}/cancel`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: 'Item Cancelled!',
                text: data.message,
                icon: 'success'
              }).then(() => location.reload());
            } else {
              Swal.fire('Error', data.message || 'Failed to cancel the item.', 'error');
            }
          })
          .catch(error => {
            console.error('Error cancelling item:', error);
            Swal.fire('Error', 'An error occurred while cancelling the item.', 'error');
          });
        }
      });
    }

    // Update Order Status Function
    function updateOrderStatus(orderId) {
      const statuses = ['ordered', 'pending', 'processing', 'shipped', 'delivered'];
      const currentStatus = document.getElementById('current-status').getAttribute("data-status");
      
      // Check if order can be updated
      if (currentStatus === 'delivered' || 
          currentStatus === 'cancelled' || 
          currentStatus === 'returned' || 
          currentStatus === 'partially_returned' ||
          currentStatus === 'partially_cancelled') {
        Swal.fire({
          title: 'Error',
          text: 'The status of this order cannot be changed anymore.',
          icon: 'error'
        });
        return;
      }
      
      Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: statuses.reduce((options, status) => {
          options[status] = status.charAt(0).toUpperCase() + status.slice(1);
          return options;
        }, {}),
        inputValue: currentStatus,
        showCancelButton: true,
        confirmButtonText: 'Update',
        showLoaderOnConfirm: true,
        preConfirm: (newStatus) => {
          return fetch(`/admin/orders/${orderId}/update-status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: newStatus })
          })
          .then(response => response.json())
          .then(data => {
            if (!data.success) throw new Error(data.message || 'Failed to update status.');
            return data;
          })
          .catch(error => {
            Swal.showValidationMessage(`Request failed: ${error.message}`);
          });
        },
        allowOutsideClick: () => !Swal.isLoading()
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire({
            title: 'Updated!',
            text: 'Order status has been updated.',
            icon: 'success'
          }).then(() => location.reload());
        }
      });
    }

    function approveItemReturn(orderId, itemId) {
      Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to approve this item's return request?",
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, approve it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/orders/${orderId}/${itemId}/approve-return`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: 'Approved!',
                text: 'Return request has been approved successfully.',
                icon: 'success'
              }).then(() => location.reload());
            } else {
              Swal.fire('Error', data.message || 'Failed to approve the return request.', 'error');
            }
          })
          .catch(error => {
            console.error('Error approving return:', error);
            Swal.fire('Error', 'An error occurred while approving the return request.', 'error');
          });
        }
      });
    }
  </script>
</body>
</html>