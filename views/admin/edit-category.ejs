<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Furnique</title>
    <style>
        :root {
            --border-radius: 8px;
            --box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
            --primary-color: #570B4F;
            --light-color: #f9f9f9;
            --dark-color: #333;
            --secondary-color: #6b8cae;
            --danger-color: #dc3545;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background-color: var(--light-color);
            padding: 20px;
            color: #570B4F;
        }

        .form-container {
            width: 100%;
            max-width: 500px;
            padding: 30px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }

        .form-header {
            margin-bottom: 30px;
            text-align: center;
        }

        .form-header h2 {
            color: var(--primary-color);
            font-weight: 500;
            font-size: 1.8rem;
            margin-bottom: 10px;
        }

        .form-header .logo {
            font-size: 2.5rem;
            color: #570B4F;
            margin-bottom: 15px;
        }

        .form-group {
            margin-bottom: 20px;
            position: relative;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: var(--dark-color);
            font-weight: 500;
            font-size: 0.95rem;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #e0e0e0;
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: var(--transition);
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 3px rgba(107, 140, 174, 0.2);
        }

        .form-group textarea {
            resize: none;
            min-height: 120px;
        }

        .error-message {
            color: var(--danger-color);
            font-size: 0.85rem;
            margin-top: 5px;
            display: block;
        }

        .btn-container {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-top: 30px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: var(--border-radius);
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            text-align: center;
            text-decoration: none;
        }

        .btn-update {
            background-color: #570B4F;
            color: white;
        }

        .btn-update:hover {
            background-color: #d812be;
        }

        .btn-cancel {
            background-color: #f8f9fa;
            color: var(--danger-color);
            border: 1px solid #e0e0e0;
        }

        .btn-cancel:hover {
            background-color: #f1f1f1;
        }

        @media (min-width: 768px) {
            .form-container {
                padding: 40px;
            }

            .btn-container {
                flex-direction: row;
                justify-content: space-between;
            }

            .btn {
                width: 48%;
            }
        }
    </style>
</head>
<body>
    <div class="form-container">
        <div class="form-header">
            <div class="logo">Furnique</div>
            <h2>Edit Category</h2>
        </div>
        <form id="editCategoryForm" action="/admin/editCategory/<%= category._id %>" method="POST">
            <div class="form-group">
                <label for="categoryName">Category Name</label>
                <input type="text" id="categoryName" name="categoryName" value="<%= category.name %>" required>
                <div class="error-message" id="categoryNameError"></div>
            </div>
            
            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description" required><%= category.description %></textarea>
                <div class="error-message" id="descriptionError"></div>
            </div>
            
            <div class="btn-container">
                <button type="submit" class="btn btn-update">Update</button>
                <a href="/admin/category" class="btn btn-cancel">Cancel</a>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('editCategoryForm');
            const categoryNameInput = document.getElementById('categoryName');
            const descriptionInput = document.getElementById('description');
            const categoryNameError = document.getElementById('categoryNameError');
            const descriptionError = document.getElementById('descriptionError');

            // Clear error messages
            function clearErrors() {
                categoryNameError.textContent = '';
                descriptionError.textContent = '';
            }

            // Show error message
            function showError(element, message) {
                element.textContent = message;
            }

            // Client-side validation
            function validateForm() {
                let isValid = true;

                // Validate Category Name
                const categoryName = categoryNameInput.value.trim();
                if (!categoryName) {
                    showError(categoryNameError, 'Category name is required.');
                    isValid = false;
                } else if (categoryName.length < 2) {
                    showError(categoryNameError, 'Category name must be at least 2 characters long.');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s-]+$/.test(categoryName)) {
                    showError(categoryNameError, 'Category name can only contain letters, numbers, spaces, and hyphens.');
                    isValid = false;
                }

                // Validate Description
                const description = descriptionInput.value.trim();
                if (!description) {
                    showError(descriptionError, 'Description is required.');
                    isValid = false;
                } else if (description.length < 10) {
                    showError(descriptionError, 'Description must be at least 10 characters long.');
                    isValid = false;
                } 

                return isValid;
            }

            // Handle form submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault(); // Prevent default form submission
                clearErrors();

                if (validateForm()) {
                    try {
                        const response = await fetch(form.action, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                categoryName: categoryNameInput.value.trim(),
                                description: descriptionInput.value.trim(),
                            }),
                        });

                        const data = await response.json();

                        if (!response.ok) {
                            // Handle backend errors
                            if (data.error === 'Category not found') {
                                showError(categoryNameError, 'Category not found.');
                            } else if (data.error === 'Category already exists, please choose another name') {
                                showError(categoryNameError, 'Category already exists, please choose another name.');
                            } else if (data.error === 'Internal server error') {
                                showError(categoryNameError, 'An error occurred. Please try again.');
                            } else {
                                showError(categoryNameError, 'An unexpected error occurred.');
                            }
                        } else if (data.success) {
                            // Success - redirect
                            window.location.href = data.redirect;
                        }
                    } catch (error) {
                        console.error('Error submitting form:', error);
                        showError(categoryNameError, 'An error occurred. Please try again.');
                    }
                }
            });
        });
    </script>
</body>
</html>