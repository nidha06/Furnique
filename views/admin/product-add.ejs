<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Furnique</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    /* Add Product Form Styling */
    .form-container {
      background-color: #ad71a5;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      max-width: 600px;
      margin: auto;
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      color: #fff;
    }
    input, textarea, select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 14px;
    }
    textarea {
      resize: none;
    }
    button.submit-btn {
      width: 100%;
      padding: 10px;
      border: none;
      border-radius: 4px;
      background-color: #570B4F;
      color: white;
      font-size: 16px;
      cursor: pointer;
    }
    button.submit-btn:hover {
      background-color: #d812be;
    }
    /* Responsive Design */
    @media (max-width: 768px) {
      .form-container {
        padding: 15px;
      }
      .form-group input,
      .form-group textarea,
      .form-group select {
        font-size: 12px;
      }
    }
    .errorMessage {
      color: red;
      font-size: 13px;
      margin-top: 5px;
    }
    .calculated-price {
      color: #fff;
      margin-top: 5px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <%- include('../../views/partials/admin/sidebar') %>
  <div class="content">
    <h2 style="margin-bottom: 20px; color: #570B4F;">Add Product</h2>
    <div class="form-container">
      <form id="addProductForm" action="/admin/addProducts" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <label for="productName">Product Name</label>
          <!-- Added an error container for product name -->
          <input 
          type="text" 
          id="productName" 
          name="productName" 
          placeholder="Enter product name" 
          required
          minlength="3"
          maxlength="100"
          pattern="^[a-zA-Z0-9\s-]+$"
        >
          <div id="productName-error" class="errorMessage"></div>
        </div>
        <div class="form-group">
          <label for="description">Description</label>
          <textarea id="description" name="description" placeholder="Enter product description" rows="4" required></textarea>
          <div id="description-error" class="errorMessage"></div>
        </div>
        <div class="form-group">
          <label for="quantity">Quantity</label>
          <input type="number" id="quantity" name="quantity" placeholder="Enter quantity" required>
          <div id="quantity-error" class="errorMessage"></div>
        </div>
        <div class="form-group">
          <label for="regularPrice">Regular Price</label>
          <input type="number" id="regularPrice" name="regularPrice" placeholder="Enter regular price" required>
          <div id="regularPrice-error" class="errorMessage"></div>
        </div>
        
        <div class="form-group">
          <label for="discount">Discount Percentage (%)</label>
          <input 
            type="number" 
            id="discount" 
            name="discount" 
            placeholder="Enter discount percentage" 
            min="0" 
            max="100" 
            required
          >
          <div id="discount-error" class="errorMessage"></div>
          <div id="calculated-sale-price" class="calculated-price"></div>
        </div>
        <input type="hidden" id="salePrice" name="salePrice">
       
        <div class="form-group">
          <label for="category">Category</label>
          <select id="category" name="category" required>
            <% for(let i = 0; i < cat.length; i++){ %>
              <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
            <% } %>
          </select>
          <div id="category-error" class="errorMessage"></div>
        </div>
        
        <% for(let i = 1; i <= 4; i++){ %>
          <div class="form-group">
            <label for="images">Upload Image <%= i %></label>
            <input type="file" id="image<%= i %>" name="images" accept="image/png,image/jpeg,image.jpg,image.webp" onchange="viewImage(event, '<%= i %>')">
            <div id="imagePreview<%= i %>" style="margin-top: 10px;">
              <img id="imgView<%= i %>" src="" alt="" style="max-width: 100%; display: none;">
            </div>
            <div id="cropperContainer<%= i %>" style="display: none;">
              <img id="croppedImg<%= i %>" src="" alt="" style="max-width: 100%;">
              <button type="button" class="submit-btn" onclick="saveImage('<%= i %>')">Save</button>
            </div>
          </div>
        <% } %>
      
        <div class="btn-container">
          <button type="submit" class="submit-btn">Add Product</button>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
    function calculateSalePrice() {
  const regularPrice = parseFloat(document.getElementById('regularPrice').value) || 0;
  const discount = parseFloat(document.getElementById('discount').value) || 0;
  
  if (regularPrice && discount >= 0 && discount <= 100) {
    const discountAmount = (regularPrice * discount) / 100;
    // Round the sale price to the nearest whole number
    const salePrice = Math.round(regularPrice - discountAmount);
    
    // Update hidden sale price input
    document.getElementById('salePrice').value = salePrice;
    
    // Display calculated sale price without decimals
    document.getElementById('calculated-sale-price').textContent = 
      `Final Sale Price: â‚¹${salePrice}`;
  } else {
    document.getElementById('calculated-sale-price').textContent = '';
  }
}

    // Add event listeners for price calculation
    document.getElementById('regularPrice').addEventListener('input', calculateSalePrice);
    document.getElementById('discount').addEventListener('input', calculateSalePrice);

    // Modified form validation
    document.querySelector('form').addEventListener('submit', async function (e) {
      e.preventDefault();
      clearErrorMessages();
      let isValid = true;

      // Validate numeric fields
      const quantity = document.getElementById('quantity');
      if (parseInt(quantity.value) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a non-negative quantity');
        isValid = false;
      }

      const regularPrice = document.getElementById('regularPrice');
      if (!/^\d+(\.\d{1,2})?$/.test(regularPrice.value) || parseFloat(regularPrice.value) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
      }

      const discount = document.getElementById('discount');
      if (parseFloat(discount.value) < 0 || parseFloat(discount.value) > 100) {
        displayErrorMessage('discount-error', 'Discount must be between 0 and 100 percent.');
        isValid = false;
      }
    });
    // Global objects for cropper instances and cropped image files
    const croppers = {};
    const croppedImages = {};
    

    function viewImage(event, index) {
      const input = event.target;
      if (!input.files || !input.files[0]) return;
      const reader = new FileReader();
      reader.onload = function() {
        const image = document.getElementById('imgView' + index);
        image.src = reader.result;
        image.style.display = 'block';
        const cropperContainer = document.getElementById('cropperContainer' + index);
        cropperContainer.style.display = 'block';
        // Destroy existing cropper if any
        if (croppers[index]) {
          croppers[index].destroy();
        }
        // Initialize CropperJS
        croppers[index] = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 1,
          guides: true,
          background: false,
          autoCropArea: 1,
          zoomable: true
        });
      };
      reader.readAsDataURL(input.files[0]);
    }

    function saveImage(index) {
      const cropper = croppers[index];
      if (!cropper) return;
      const croppedCanvas = cropper.getCroppedCanvas();
      const image = document.getElementById('imgView' + index);
      croppedCanvas.toBlob((blob) => {
        const timestamp = new Date().getTime();
        const fileName = `product-image-${timestamp}-${index}.png`;
        croppedImages[index] = new File([blob], fileName, { type: 'image/png' });
        // Update preview
        image.src = croppedCanvas.toDataURL('image/jpeg');
      }, 'image/png');
      cropper.destroy();
      croppers[index] = null;
      document.getElementById('cropperContainer' + index).style.display = 'none';
    }

    // Helper functions for error message display
    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      const errors = document.querySelectorAll('.errorMessage');
      errors.forEach(el => {
        el.innerText = "";
      });
    }

    // Synchronous field check (for required fields and cropping)
    function validateFormFields() {
      const requiredFields = ['productName', 'description', 'quantity', 'regularPrice', 'salePrice', 'category'];
      for (const field of requiredFields) {
        const input = document.getElementById(field);
        if (!input.value.trim()) {
          alert(`Please fill in the ${field.replace(/([A-Z])/g, ' $1').toLowerCase()}`);
          return false;
        }
      }
      // Check that all image fields have been cropped
      for (let i = 1; i <= 4; i++) {
        if (!croppedImages[i]) {
          alert(`Please crop image ${i} before submitting`);
          return false;
        }
      }
      return true;
    }

    // Main form submission handling
    document.querySelector('form').addEventListener('submit', async function (e) {
      e.preventDefault();
      clearErrorMessages();
      let isValid = true;

      // Validate numeric fields
      const quantity = document.getElementById('quantity');
      if (parseInt(quantity.value) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a non-negative quantity');
        isValid = false;
      }
      const regularPrice = document.getElementById('regularPrice');
      if (!/^\d+(\.\d{1,2})?$/.test(regularPrice.value) || parseFloat(regularPrice.value) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
      }
      
     

      // Validate product name and check case-insensitive uniqueness
      const productName = document.getElementById('productName');
      const productNameVal = productName.value.trim();
      if (!productNameVal) {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
      }
      // You may also include checks for uppercase and lowercase letters if needed:
      // else if (!/(?=.*[a-z])(?=.*[A-Z])/.test(productNameVal)) {
      //   displayErrorMessage('productName-error', 'Product name must contain at least one uppercase and one lowercase letter.');
      //   isValid = false;
      // }

      if (!isValid) return;

    
      // Validate remaining fields (if any) via synchronous function
      if (!validateFormFields()) return;

      // Build form data and remove original image inputs, replacing with cropped images.
      const formData = new FormData(this);
      for (let pair of formData.entries()) {
        if (pair[0] === 'images') {
          formData.delete(pair[0]);
        }
      }
      for (let i = 1; i <= 4; i++) {
        if (croppedImages[i]) {
          formData.append('images', croppedImages[i]);
        }
      }

      try {
        const response = await fetch('/admin/addProducts', {
          method: 'POST',
          body: formData,
        });
        const result = await response.json();
        if (result.success) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: result.message,
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.message,
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Something went wrong. Please try again later.',
        });
      }
    });
  </script>
</body>
</html>
